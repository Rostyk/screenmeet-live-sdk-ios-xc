// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ScreenMeetLive
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AudioToolbox
import CoreImage.CIFilterBuiltins
import CoreGraphics
import CoreImage
import Foundation
import ReplayKit
import SocketIO
import Swift
import UIKit
import Vision
import WebKit
import WebRTC
import _Concurrency
import _StringProcessing
import os.log
import os
@objc @_hasMissingDesignatedInitializers public class SMVideoTrack : ObjectiveC.NSObject {
  public var rtcTrack: WebRTC.RTCVideoTrack {
    get
  }
  public var info: ScreenMeetLive.SMTrackInfo {
    get
  }
  @objc deinit
}
public struct SMTextMessage {
  public let id: Swift.String
  public let createdOn: Foundation.Date
  public let updatedOn: Foundation.Date?
  public let text: Swift.String
  public let senderId: Swift.String
  public let senderName: Swift.String
}
public typealias SMFeatureChangeCallback = (ScreenMeetLive.SMFeature, Swift.Bool) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SMPreferences : ObjectiveC.NSObject {
  public static let shared: ScreenMeetLive.SMPreferences
  public var serverUrl: Swift.String {
    get
    set
  }
  public var cropScreen: Swift.Bool {
    get
    set
  }
  public var usePre12OSXScreenAPI: Swift.Bool {
    get
    set
  }
  public var downscaleScreen: Swift.Bool {
    get
    set
  }
  public var screenFPS: Swift.Int {
    get
    set
  }
  public var blurCamera: Swift.Bool {
    get
    set
  }
  public var cameraFPS: Swift.Int {
    get
    set
  }
  public var logSignalling: Swift.Bool {
    get
    set
  }
  public var logMediasoup: Swift.Bool {
    get
    set
  }
  public var logHttp: Swift.Bool {
    get
    set
  }
  public var logWebRtc: Swift.Bool {
    get
    set
  }
  public var logRawSocket: Swift.Bool {
    get
    set
  }
  public var logInfo: Swift.Bool {
    get
    set
  }
  public var logVerbose: Swift.Bool {
    get
    set
  }
  public var logError: Swift.Bool {
    get
    set
  }
  public var approveRequestsToJoin: Swift.Bool {
    get
    set
  }
  public var recordMeeting: Swift.Bool {
    get
    set
  }
  public var followActiveSpeaker: Swift.Bool {
    get
    set
  }
  public var flipCameraImage: Swift.Bool {
    get
    set
  }
  public var cameraDeviceId: Swift.String? {
    get
    set
  }
  public var cameraFormatDescription: Swift.String? {
    get
    set
  }
  public var outputDeviceId: Swift.Int? {
    get
    set
  }
  public var inputDeviceId: Swift.Int? {
    get
    set
  }
  public func getCurrentCameraConfiguration() -> ScreenMeetLive.SMCameraConfiguration
  public func subscribeForFeaturesChange(_ object: Swift.AnyObject, _ callback: @escaping ScreenMeetLive.SMFeatureChangeCallback)
  public func unsubscribeFromFeaturesChanges(_ object: Swift.AnyObject)
  @objc deinit
}
public struct SMActiveSpeakerInfo {
  public var participantId: Swift.String {
    get
  }
  public var trackInfo: ScreenMeetLive.SMTrackInfo? {
    get
  }
}
public enum SMCapability : Swift.String, Swift.Codable {
  case multistreaming
  case remotecontrol
  case laserpointer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SMPermissionType : Swift.String, Swift.CaseIterable {
  case laserpointer
  case remotecontrol
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ScreenMeetLive.SMPermissionType]
  public typealias RawValue = Swift.String
  public static var allCases: [ScreenMeetLive.SMPermissionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SMVideoView : WebRTC.RTCMTLVideoView {
  @_Concurrency.MainActor(unsafe) public var track: WebRTC.RTCVideoTrack!
  @_Concurrency.MainActor(unsafe) public var info: ScreenMeetLive.SMTrackInfo!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SMTrackInfo : SocketIO.SocketData {
  public var width: Swift.Int!
  public var height: Swift.Int!
  public var producerKey: Swift.String! {
    get
  }
  public var profile: Swift.String! {
    get
  }
  public var sourceType: Swift.String!
  public var trackId: Swift.String! {
    get
  }
  public func socketRepresentation() -> any SocketIO.SocketData
}
public struct SMCameraConfiguration : Swift.Equatable {
  public var device: AVFoundation.AVCaptureDevice {
    get
  }
  public var format: AVFoundation.AVCaptureDevice.Format {
    get
  }
  public init(device: AVFoundation.AVCaptureDevice, format: AVFoundation.AVCaptureDevice.Format)
  public static func == (a: ScreenMeetLive.SMCameraConfiguration, b: ScreenMeetLive.SMCameraConfiguration) -> Swift.Bool
}
public enum SMVideoSource : Swift.Equatable {
  case screen
  case camera(ScreenMeetLive.SMCameraConfiguration)
  case customImageStream
  public static func == (a: ScreenMeetLive.SMVideoSource, b: ScreenMeetLive.SMVideoSource) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SMParticipant : Swift.Equatable, Foundation.NSCopying {
  public var id: Swift.String
  public var isMe: Swift.Bool
  public var capabilities: [ScreenMeetLive.SMCapability]
  public var name: Swift.String {
    get
  }
  public var role: ScreenMeetLive.SMIdentityInfoRole {
    get
  }
  public var connectedAt: Swift.Int64 {
    get
  }
  public var callerState: ScreenMeetLive.SMCallerState!
  public var avState: ScreenMeetLive.SMParticipantMediaState {
    get
  }
  public var isTalking: Swift.Bool {
    get
  }
  public var videoTracks: [ScreenMeetLive.SMVideoTrack]
  public var screenVideoTrack: ScreenMeetLive.SMVideoTrack? {
    get
  }
  public var aduioTrack: WebRTC.RTCAudioTrack?
  public static func == (lhs: ScreenMeetLive.SMParticipant, rhs: ScreenMeetLive.SMParticipant) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public struct SMParticipantMediaState {
  public var isCameraVideoActive: Swift.Bool {
    get
  }
  public var isScreenVideoActive: Swift.Bool {
    get
  }
  public var isScreenShareByImageTransferOn: Swift.Bool {
    get
  }
  public var audioState: ScreenMeetLive.SMParticipantMediaState.AudioState {
    get
  }
  public var isAudioActive: Swift.Bool {
    get
  }
  public enum VideoState : Swift.Equatable {
    case VIDEO(sources: [ScreenMeetLive.SMVideoSource])
    case ANNOTATION
    case NONE
    public static func == (a: ScreenMeetLive.SMParticipantMediaState.VideoState, b: ScreenMeetLive.SMParticipantMediaState.VideoState) -> Swift.Bool
  }
  public enum AudioState {
    case MICROPHONE
    case NONE
    public static func == (a: ScreenMeetLive.SMParticipantMediaState.AudioState, b: ScreenMeetLive.SMParticipantMediaState.AudioState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class SMWaitingParticipantInfo : Swift.Decodable {
  public var id: Swift.String!
  public var type: Swift.String!
  public var role: ScreenMeetLive.SMIdentityInfoRole!
  public var user: ScreenMeetLive.SMIdentityInfoUser!
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SMChallenge {
  public func solve(_ answer: Swift.String)
  public func getSvg() -> Swift.String
  @objc deinit
}
public enum SMFeature : Swift.String, Swift.Equatable {
  case approveRequestsToJoin
  case recordMeeting
  case followActiveSpeaker
  case flipCameraImage
  case blurCameraImage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SMImageHandler : ObjectiveC.NSObject {
  public func transferImage(_ image: UIKit.UIImage)
  @objc override dynamic public init()
  @objc deinit
}
public typealias SMConnectCompletion = (_ error: ScreenMeetLive.SMError?) -> Swift.Void
public typealias SMGetRoomInformationCompletion = (_ roomMetaData: ScreenMeetLive.SMRoomInformation?, _ error: ScreenMeetLive.SMError?) -> Swift.Void
public struct SMRoomInformation {
  public var id: Swift.String {
    get
  }
  public var settings: ScreenMeetLive.SMRoomSettings {
    get
  }
  public var features: ScreenMeetLive.SMRoomFeatures {
    get
  }
  public var desktop: ScreenMeetLive.SMDesktopFeatures {
    get
  }
  public var servers: ScreenMeetLive.SMConnectServers {
    get
  }
}
public struct SMConnectOptions {
  public var startAudioEnabled: Swift.Bool
  public var startVideoEnabled: Swift.Bool
  public var blurDefault: Swift.Bool
  public var deviceId: Swift.String
  public init(startAudioEnabled: Swift.Bool, startVideoEnabled: Swift.Bool, blurDefault: Swift.Bool, deviceId: Swift.String)
}
public protocol ScreenMeetChatDelegate : AnyObject {
  func onTextMessageReceived(_ message: ScreenMeetLive.SMTextMessage)
  func onMessageSendFailed(_ error: ScreenMeetLive.SMError)
}
public protocol ScreenMeetDelegate : AnyObject {
  func onLocalAudioCreated()
  func onLocalVideoCreated(_ source: ScreenMeetLive.SMVideoSource, _ videoTrack: ScreenMeetLive.SMVideoTrack)
  func onLocalVideoSourceChanged()
  func onLocalVideoStopped(_ source: ScreenMeetLive.SMVideoSource, _ videoTrack: ScreenMeetLive.SMVideoTrack)
  func onLocalAudioStopped()
  func onParticipantJoined(_ participant: ScreenMeetLive.SMParticipant)
  func onParticipantInfoUpdated(_ updatedParticipant: ScreenMeetLive.SMParticipant)
  func onParticipantVideoTrackCreated(_ participant: ScreenMeetLive.SMParticipant, _ track: WebRTC.RTCVideoTrack, _ trackInfo: ScreenMeetLive.SMTrackInfo)
  func onParticipantVideoTrackStopped(_ participant: ScreenMeetLive.SMParticipant, _ track: WebRTC.RTCVideoTrack, _ trackInfo: ScreenMeetLive.SMTrackInfo)
  func onParticipantAudioTrackCreated(_ participant: ScreenMeetLive.SMParticipant)
  func onParticipantLeft(_ participant: ScreenMeetLive.SMParticipant)
  func onParticipantMediaStateChanged(_ participant: ScreenMeetLive.SMParticipant)
  func onActiveSpeakerChanged(_ participant: ScreenMeetLive.SMParticipant, _ trackInfo: ScreenMeetLive.SMTrackInfo?)
  func onConnectionStateChanged(_ newState: ScreenMeetLive.SMConnectionState)
  func onError(_ error: ScreenMeetLive.SMError)
  func onFeatureRequest(_ featureReqeust: ScreenMeetLive.SMFeatureRequestData, _ decisionHandler: @escaping (_ granted: Swift.Bool) -> Swift.Void)
  func onFeatureRequestRejected(_ featureRequest: ScreenMeetLive.SMFeatureRequestData)
  func onFeatureStopped(_ featureRequest: ScreenMeetLive.SMFeatureRequestData)
  func onFeatureStarted(_ featureRequest: ScreenMeetLive.SMFeatureRequestData)
  func onRemoteControlEvent(_ event: ScreenMeetLive.SMRemoteControlEvent)
  func onWaitingListChanged(_ waitingParticipants: [ScreenMeetLive.SMWaitingParticipantInfo])
  var rootViewController: UIKit.UIViewController? { get }
}
@_hasMissingDesignatedInitializers public class SMCallerState : SocketIO.SocketData {
  public var audioEnabled: Swift.Bool
  public var videoEnabled: Swift.Bool
  public var screenEnabled: Swift.Bool
  public var imageTransferEnabled: Swift.Bool
  public var screenAnnotationEnabled: Swift.Bool
  public var talking: Swift.Bool
  public func socketRepresentation() -> any SocketIO.SocketData
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ScreenMeet : ObjectiveC.NSObject {
  public static let config: ScreenMeetLive.ScreenMeetConfig
  weak public static var delegate: (any ScreenMeetLive.ScreenMeetDelegate)? {
    get
    set
  }
  weak public static var chatDelegate: (any ScreenMeetLive.ScreenMeetChatDelegate)? {
    get
    set
  }
  public static func connect(_ roomId: Swift.String, _ connectOptions: ScreenMeetLive.SMConnectOptions, _ completion: @escaping ScreenMeetLive.SMConnectCompletion)
  public static func connect(_ roomInformation: ScreenMeetLive.SMRoomInformation, _ connectOptions: ScreenMeetLive.SMConnectOptions, _ completion: @escaping ScreenMeetLive.SMConnectCompletion)
  public static func getRoomInformation(_ roomId: Swift.String, _ completion: @escaping ScreenMeetLive.SMGetRoomInformationCompletion)
  public static func disconnect()
  public static func getMediaState() -> ScreenMeetLive.SMParticipantMediaState
  public static func shareCamera(_ configuration: ScreenMeetLive.SMCameraConfiguration!)
  public static func shareScreen(_ source: ScreenMeetLive.SMVideoSource)
  public static func shareScreenWithImageTransfer(_ completion: @escaping ((ScreenMeetLive.SMImageHandler?) -> Swift.Void))
  public static func stopVideoSharing(_ source: ScreenMeetLive.SMVideoSource)
  public static func shareMicrophone()
  public static func stopAudioSharing()
  public static func getActiveSources() -> [ScreenMeetLive.SMVideoSource]
  public static func getParticipants() -> [ScreenMeetLive.SMParticipant]
  public static func getConnectionState() -> ScreenMeetLive.SMConnectionState
  public static func getConfidentiality() -> ScreenMeetLive.SMConfidentiality
  public static func getChatMessages() -> [ScreenMeetLive.SMTextMessage]
  public static func sendTextMessage(_ text: Swift.String)
  public static func requestFeature(_ permissionType: ScreenMeetLive.SMPermissionType, _ tragetParticipantId: Swift.String)
  public static func cancelFeatureRequest(_ featureRequest: ScreenMeetLive.SMFeatureRequestData)
  public static func pendingFeatureRequests() -> [ScreenMeetLive.SMFeatureRequestData]
  public static func grantedFeatureRequests() -> [ScreenMeetLive.SMFeatureRequestData]
  public static func stopFeature(_ featureRequest: ScreenMeetLive.SMFeatureRequestData)
  public static func sendLaserPointerEvent(_ targetParticipantId: Swift.String, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  public static func sendRemoteControlEvent(_ event: ScreenMeetLive.SMRemoteControlEvent)
  public static func getRoomFeatures() -> ScreenMeetLive.SMRoomFeatures
  public static func getDesktopFeatures() -> ScreenMeetLive.SMDesktopFeatures
  public static func enableFeature(_ feature: ScreenMeetLive.SMFeature)
  public static func disableFeature(_ feature: ScreenMeetLive.SMFeature)
  public static func isHost() -> Swift.Bool
  public static func approveParticipantToJoin(_ participantInfo: ScreenMeetLive.SMWaitingParticipantInfo)
  public static func denyParticipantToJoin(_ participantInfo: ScreenMeetLive.SMWaitingParticipantInfo)
  public static func getParticipantsInWaitingRoom() -> [ScreenMeetLive.SMWaitingParticipantInfo]
  public static func assignRole(_ role: ScreenMeetLive.SMIdentityInfoRole, _ participantId: Swift.String)
  public static func kickOut(_ participantId: Swift.String)
  public static func getActiveSpeaker() -> ScreenMeetLive.SMActiveSpeakerInfo?
  @objc override dynamic public init()
  @objc deinit
}
public enum SMLogLevel : Swift.Int, Swift.Comparable {
  case none
  case info
  case debug
  case error
  public static func < (lhs: ScreenMeetLive.SMLogLevel, rhs: ScreenMeetLive.SMLogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SMDeveloperLogTier : Swift.String, Swift.Comparable {
  case signalling
  case mediasoup
  case http
  case webrtc
  case rawSocket
  public static func < (lhs: ScreenMeetLive.SMDeveloperLogTier, rhs: ScreenMeetLive.SMDeveloperLogTier) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ScreenMeetConfig {
  open var endpoint: Foundation.URL
  open var parameters: [Swift.String : Any]
  open var collectMetric: Swift.Bool
  open var loggingLevel: ScreenMeetLive.SMLogLevel {
    get
    set
  }
  open var developerLoggingTiers: [ScreenMeetLive.SMDeveloperLogTier] {
    get
    set
  }
  open var httpTimeout: Swift.Double {
    get
    set
  }
  open var httpNumRetry: Swift.Int {
    get
    set
  }
  open var socketConnectionTimeout: Swift.Double {
    get
    set
  }
  open var socketConnectionNumRetries: Swift.Int {
    get
    set
  }
  open var socketReconnectNumRetries: Swift.Int {
    get
    set
  }
  open var socketReconnectDelay: Swift.Double {
    get
    set
  }
  open var webRtcTimeout: Swift.Double {
    get
    set
  }
  open var webRtcNumRetries: Swift.Int {
    get
    set
  }
  @objc deinit
}
public enum SMConnectionState : Swift.Equatable, Swift.CustomStringConvertible {
  case connecting
  case connected
  case reconnecting
  case disconnected(_: ScreenMeetLive.SMDisconnectionReason)
  case waitingEntrancePermission
  public static func == (l: ScreenMeetLive.SMConnectionState, r: ScreenMeetLive.SMConnectionState) -> Swift.Bool
  public var description: Swift.String {
    get
  }
}
public enum SMDisconnectionReason {
  case callEndedByServer
  case leftCall
  case networkError
  case callNotStarted
  case knockWaitTimeExpired
  case reconnectWaitTimeExpired
  case hostRefuedToLetIn
  public static func == (a: ScreenMeetLive.SMDisconnectionReason, b: ScreenMeetLive.SMDisconnectionReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMRemoteControlEvent : SocketIO.SocketData {
  public var to: Swift.String {
    get
  }
  public var from: Swift.String {
    get
  }
  public init(_ from: Swift.String, _ to: Swift.String)
  public func socketRepresentation() -> any SocketIO.SocketData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMConfidentiality {
  public func addConfidentialView(_ view: UIKit.UIView)
  public func removeConfidentialView(_ view: UIKit.UIView)
  public func addConfidentialRect(_ rect: CoreFoundation.CGRect)
  public func removeConfidentialRect(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum SMIdentityInfoRole : Swift.Int, Swift.Codable {
  case SERVER
  case HOST
  case SUPERVISOR
  case AGENT
  case GUEST
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SMIdentityInfoUser : Swift.Codable, SocketIO.SocketData {
  public var name: Swift.String
  public func socketRepresentation() -> any SocketIO.SocketData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SMMouseActionType : Swift.String {
  case unknown
  case leftdown
  case rightdown
  case leftDoubleClicked
  case rightDoubleClicked
  case middleDown
  case middleUp
  case move
  case leftup
  case rightup
  case wheel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMRemoteControlMouseEvent : ScreenMeetLive.SMRemoteControlEvent {
  public var ts: Swift.Int64? {
    get
  }
  public var x: Swift.Double {
    get
  }
  public var y: Swift.Double {
    get
  }
  public var dx: Swift.Double? {
    get
  }
  public var dy: Swift.Double? {
    get
  }
  public var type: ScreenMeetLive.SMMouseActionType {
    get
  }
  public init(_ from: Swift.String, _ to: Swift.String, _ x: Swift.Double, _ y: Swift.Double, _ type: ScreenMeetLive.SMMouseActionType)
  override public func socketRepresentation() -> any SocketIO.SocketData
  @objc deinit
}
public enum SMKeyboardActionType : Swift.String {
  case unknown
  case keydown
  case keyup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMRemoteControlKeyboardEvent : ScreenMeetLive.SMRemoteControlEvent {
  public var key: Swift.String {
    get
  }
  public var ascii: Swift.Int {
    get
  }
  public var unicode: Swift.Int {
    get
  }
  public var type: ScreenMeetLive.SMKeyboardActionType {
    get
  }
  public init(_ from: Swift.String, _ to: Swift.String, _ key: Swift.String, _ ascii: Swift.Int, _ unicode: Swift.Int, _ type: ScreenMeetLive.SMKeyboardActionType)
  override public func socketRepresentation() -> any SocketIO.SocketData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMFeatureRequestData : SocketIO.SocketData {
  public var deviceGrantId: Swift.String! {
    get
  }
  public var grantorCid: Swift.String! {
    get
  }
  public var privilege: Swift.String! {
    get
  }
  public var requestId: Swift.String! {
    get
  }
  public var requestorCid: Swift.String! {
    get
  }
  public var status: Swift.String! {
    get
  }
  public var timeCreated: Swift.CLong! {
    get
  }
  public var uniqueGrantor: Swift.String! {
    get
  }
  public var uniqueRequestor: Swift.String! {
    get
  }
  public func socketRepresentation() -> any SocketIO.SocketData
  @objc deinit
}
public enum SMErrorCode : Swift.Equatable {
  public static func == (l: ScreenMeetLive.SMErrorCode, r: ScreenMeetLive.SMErrorCode) -> Swift.Bool
  case httpError(_: ScreenMeetLive.SMHTTPCode)
  case socketError
  case notReachableError
  case transactionInternalError
  case capturerInternalError
  case screenCapturerInternalError(source: ScreenMeetLive.SMVideoSource)
  case mediaTrackError
  case knockEntryPermissionRequiredError
  case knockWaitTimeForEntryExpiredError
  case droppedByServer
  case tooManyCaptchaAttempmts
}
public enum SMHTTPCode : Swift.Int {
  case notFound
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SMError {
  public var code: ScreenMeetLive.SMErrorCode
  public var message: Swift.String
  public var challenge: ScreenMeetLive.SMChallenge?
}
public struct SMDesktopFeatures : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct SMRoomFeatures : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct SMConnectServers : Swift.Decodable {
  public var live: ScreenMeetLive.SMConnectLiveServer {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SMRoomSettings : Swift.Decodable {
  public func audioEnabled() -> Swift.Bool
  public func knockEnabled() -> Swift.Bool
  public func recordingEnabled() -> Swift.Bool
  public func guestVideoEnabled() -> Swift.Bool
  public func startWithRemoteControl() -> Swift.Bool
  public func startwithAdminEnabled() -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct SMConnectLiveServer : Swift.Decodable {
  public var endpoint: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension ScreenMeetLive.SMCapability : Swift.Equatable {}
extension ScreenMeetLive.SMCapability : Swift.Hashable {}
extension ScreenMeetLive.SMCapability : Swift.RawRepresentable {}
extension ScreenMeetLive.SMPermissionType : Swift.Equatable {}
extension ScreenMeetLive.SMPermissionType : Swift.Hashable {}
extension ScreenMeetLive.SMPermissionType : Swift.RawRepresentable {}
extension ScreenMeetLive.SMParticipantMediaState.AudioState : Swift.Equatable {}
extension ScreenMeetLive.SMParticipantMediaState.AudioState : Swift.Hashable {}
extension ScreenMeetLive.SMFeature : Swift.Hashable {}
extension ScreenMeetLive.SMFeature : Swift.RawRepresentable {}
extension ScreenMeetLive.SMLogLevel : Swift.Hashable {}
extension ScreenMeetLive.SMLogLevel : Swift.RawRepresentable {}
extension ScreenMeetLive.SMDeveloperLogTier : Swift.Hashable {}
extension ScreenMeetLive.SMDeveloperLogTier : Swift.RawRepresentable {}
extension ScreenMeetLive.SMDisconnectionReason : Swift.Equatable {}
extension ScreenMeetLive.SMDisconnectionReason : Swift.Hashable {}
extension ScreenMeetLive.SMIdentityInfoRole : Swift.Equatable {}
extension ScreenMeetLive.SMIdentityInfoRole : Swift.Hashable {}
extension ScreenMeetLive.SMIdentityInfoRole : Swift.RawRepresentable {}
extension ScreenMeetLive.SMMouseActionType : Swift.Equatable {}
extension ScreenMeetLive.SMMouseActionType : Swift.Hashable {}
extension ScreenMeetLive.SMMouseActionType : Swift.RawRepresentable {}
extension ScreenMeetLive.SMKeyboardActionType : Swift.Equatable {}
extension ScreenMeetLive.SMKeyboardActionType : Swift.Hashable {}
extension ScreenMeetLive.SMKeyboardActionType : Swift.RawRepresentable {}
extension ScreenMeetLive.SMHTTPCode : Swift.Equatable {}
extension ScreenMeetLive.SMHTTPCode : Swift.Hashable {}
extension ScreenMeetLive.SMHTTPCode : Swift.RawRepresentable {}
