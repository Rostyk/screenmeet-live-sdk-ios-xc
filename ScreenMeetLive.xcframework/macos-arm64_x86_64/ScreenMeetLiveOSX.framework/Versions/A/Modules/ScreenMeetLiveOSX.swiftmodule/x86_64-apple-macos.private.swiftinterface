// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-macos12.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScreenMeetLiveOSX
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AppKit
import CoreImage.CIFilterBuiltins
import Cocoa
import CoreGraphics
import CoreImage
import Foundation
import ReplayKit
import ScreenCaptureKit
@_exported import ScreenMeetLiveOSX
import SocketIO
import Swift
import Vision
import WebRTC
import _Concurrency
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SMVideoView : WebRTC.RTCMTLNSVideoView {
  @_Concurrency.MainActor(unsafe) public var track: WebRTC.RTCVideoTrack!
  @_Concurrency.MainActor(unsafe) public var info: ScreenMeetLiveOSX.SMTrackInfo!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setFrameSize(_ newSize: Foundation.NSSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SMTextMessage {
  public let id: Swift.String
  public let createdOn: Foundation.Date
  public let updatedOn: Foundation.Date?
  public let text: Swift.String
  public let senderId: Swift.String
  public let senderName: Swift.String
}
public enum SMCapability : Swift.String, Swift.Codable {
  case multistreaming
  case remotecontrol
  case laserpointer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SMTrackInfo : SocketIO.SocketData {
  public var width: Swift.Int!
  public var height: Swift.Int!
  public var producerKey: Swift.String! {
    get
  }
  public var profile: Swift.String! {
    get
  }
  public var trackId: Swift.String! {
    get
  }
  public func socketRepresentation() -> SocketIO.SocketData
}
public enum SMVideoSource : Swift.Equatable {
  case screen
  case windows(ScreenMeetLiveOSX.SMCaptureAppsSesssionDescription)
  case camera(AVFoundation.AVCaptureDevice)
  case customImageStream
  public static func == (a: ScreenMeetLiveOSX.SMVideoSource, b: ScreenMeetLiveOSX.SMVideoSource) -> Swift.Bool
}
public class SMCaptureAppInfo : Swift.Equatable {
  public static func == (lhs: ScreenMeetLiveOSX.SMCaptureAppInfo, rhs: ScreenMeetLiveOSX.SMCaptureAppInfo) -> Swift.Bool
  public init(_ appId: Swift.Int64, _ appName: Swift.String, _ windowIds: [CoreGraphics.CGWindowID])
  public var appId: Swift.Int64
  public var appName: Swift.String
  public var windowIds: [CoreGraphics.CGWindowID]
  @objc deinit
}
public class SMCaptureAppsSesssionDescription : Swift.Equatable {
  public static func == (lhs: ScreenMeetLiveOSX.SMCaptureAppsSesssionDescription, rhs: ScreenMeetLiveOSX.SMCaptureAppsSesssionDescription) -> Swift.Bool
  public init(_ apps: [ScreenMeetLiveOSX.SMCaptureAppInfo])
  public var apps: [ScreenMeetLiveOSX.SMCaptureAppInfo]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMParticipant : Swift.Equatable {
  public var id: Swift.String
  public var isMe: Swift.Bool
  public var capabilities: [ScreenMeetLiveOSX.SMCapability]
  public var name: Swift.String {
    get
  }
  public var role: ScreenMeetLiveOSX.SMIdentityInfoRole {
    get
  }
  public var connectedAt: Swift.Int64 {
    get
  }
  public var avState: ScreenMeetLiveOSX.SMParticipantMediaState {
    get
  }
  public var isTalking: Swift.Bool {
    get
  }
  public var videoTracks: [ScreenMeetLiveOSX.SMVideoTrack]
  public var screenVideoTrack: ScreenMeetLiveOSX.SMVideoTrack? {
    get
  }
  public var aduioTrack: WebRTC.RTCAudioTrack?
  public static func == (lhs: ScreenMeetLiveOSX.SMParticipant, rhs: ScreenMeetLiveOSX.SMParticipant) -> Swift.Bool
  @objc deinit
}
public struct SMParticipantMediaState {
  public var isCameraVideoActive: Swift.Bool {
    get
  }
  public var isScreenVideoActive: Swift.Bool {
    get
  }
  public var isScreenShareByImageTransferOn: Swift.Bool {
    get
  }
  public var audioState: ScreenMeetLiveOSX.SMParticipantMediaState.AudioState {
    get
  }
  public var isAudioActive: Swift.Bool {
    get
  }
  public enum VideoState : Swift.Equatable {
    case VIDEO(sources: [ScreenMeetLiveOSX.SMVideoSource])
    case ANNOTATION
    case NONE
    public static func == (a: ScreenMeetLiveOSX.SMParticipantMediaState.VideoState, b: ScreenMeetLiveOSX.SMParticipantMediaState.VideoState) -> Swift.Bool
  }
  public enum AudioState {
    case MICROPHONE
    case NONE
    public static func == (a: ScreenMeetLiveOSX.SMParticipantMediaState.AudioState, b: ScreenMeetLiveOSX.SMParticipantMediaState.AudioState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SMPreferences : ObjectiveC.NSObject {
  public static let shared: ScreenMeetLiveOSX.SMPreferences
  public var serverUrl: Swift.String {
    get
    set
  }
  public var cropScreen: Swift.Bool {
    get
    set
  }
  public var forceQuartzCoreScreenAPI: Swift.Bool {
    get
    set
  }
  public var downscaleScreen: Swift.Bool {
    get
    set
  }
  public var screenFPS: Swift.Int {
    get
    set
  }
  public var blurCamera: Swift.Bool {
    get
    set
  }
  public var cameraFPS: Swift.Int {
    get
    set
  }
  public var logSignalling: Swift.Bool {
    get
    set
  }
  public var logMediasoup: Swift.Bool {
    get
    set
  }
  public var logHttp: Swift.Bool {
    get
    set
  }
  public var logWebRtc: Swift.Bool {
    get
    set
  }
  public var logRawSocket: Swift.Bool {
    get
    set
  }
  public var logInfo: Swift.Bool {
    get
    set
  }
  public var logVerbose: Swift.Bool {
    get
    set
  }
  public var logError: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMChallenge {
  public func solve(_ answer: Swift.String)
  public func getSvg() -> Swift.String
  @objc deinit
}
extension Swift.UInt16 {
  public init?(character: Swift.String)
  public init?(modifierFlag: AppKit.NSEvent.ModifierFlags)
  public init?(specialKey: AppKit.NSEvent.SpecialKey)
  public init?(specialWindowsKey: Swift.Int)
}
extension AppKit.NSEvent.ModifierFlags : Swift.Hashable {
}
extension Swift.OptionSet {
  public func first(_ options: Self.Element...) -> Self.Element?
}
public typealias SMConnectCompletion = (_ error: ScreenMeetLiveOSX.SMError?) -> Swift.Void
public protocol ScreenMeetChatDelegate : AnyObject {
  func onTextMessageReceived(_ message: ScreenMeetLiveOSX.SMTextMessage)
  func onMessageSendFailed(_ error: ScreenMeetLiveOSX.SMError)
}
public protocol ScreenMeetDelegate : AnyObject {
  func onLocalAudioCreated()
  func onLocalVideoCreated(_ source: ScreenMeetLiveOSX.SMVideoSource, _ videoTrack: ScreenMeetLiveOSX.SMVideoTrack)
  func onLocalVideoSourceChanged()
  func onLocalVideoStopped(_ source: ScreenMeetLiveOSX.SMVideoSource, _ videoTrack: ScreenMeetLiveOSX.SMVideoTrack)
  func onLocalAudioStopped()
  func onParticipantJoined(_ participant: ScreenMeetLiveOSX.SMParticipant)
  func onParticipantVideoTrackCreated(_ participant: ScreenMeetLiveOSX.SMParticipant, _ track: WebRTC.RTCVideoTrack, _ trackInfo: ScreenMeetLiveOSX.SMTrackInfo)
  func onParticipantVideoTrackStopped(_ participant: ScreenMeetLiveOSX.SMParticipant, _ track: WebRTC.RTCVideoTrack, _ trackInfo: ScreenMeetLiveOSX.SMTrackInfo)
  func onParticipantAudioTrackCreated(_ participant: ScreenMeetLiveOSX.SMParticipant)
  func onParticipantLeft(_ participant: ScreenMeetLiveOSX.SMParticipant)
  func onParticipantMediaStateChanged(_ participant: ScreenMeetLiveOSX.SMParticipant)
  func onActiveSpeakerChanged(_ participant: ScreenMeetLiveOSX.SMParticipant, _ trackInfo: ScreenMeetLiveOSX.SMTrackInfo?)
  func onConnectionStateChanged(_ newState: ScreenMeetLiveOSX.SMConnectionState)
  func onError(_ error: ScreenMeetLiveOSX.SMError)
  func onFeatureRequest(_ featureReqeust: ScreenMeetLiveOSX.SMFeatureRequestData, _ decisionHandler: @escaping (_ granted: Swift.Bool) -> Swift.Void)
  func onFeatureRequestRejected(_ featureRequest: ScreenMeetLiveOSX.SMFeatureRequestData)
  func onFeatureStopped(_ featureRequest: ScreenMeetLiveOSX.SMFeatureRequestData)
  func onFeatureStarted(_ featureRequest: ScreenMeetLiveOSX.SMFeatureRequestData)
  func onRemoteControlEvent(_ event: ScreenMeetLiveOSX.SMRemoteControlEvent)
  var rootViewController: AppKit.NSViewController? { get }
}
@objc @_hasMissingDesignatedInitializers public class SMVideoTrack : ObjectiveC.NSObject {
  public var rtcTrack: WebRTC.RTCVideoTrack {
    get
  }
  public var info: ScreenMeetLiveOSX.SMTrackInfo {
    get
  }
  @objc deinit
}
public enum SMPermissionType : Swift.String, Swift.CaseIterable {
  case laserpointer
  case remotecontrol
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ScreenMeetLiveOSX.SMPermissionType]
  public typealias RawValue = Swift.String
  public static var allCases: [ScreenMeetLiveOSX.SMPermissionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ScreenMeet : ObjectiveC.NSObject {
  public static let config: ScreenMeetLiveOSX.ScreenMeetConfig
  weak public static var delegate: ScreenMeetLiveOSX.ScreenMeetDelegate? {
    get
    set
  }
  weak public static var chatDelegate: ScreenMeetLiveOSX.ScreenMeetChatDelegate? {
    get
    set
  }
  public static func connect(_ code: Swift.String, _ localUserName: Swift.String, _ completion: @escaping ScreenMeetLiveOSX.SMConnectCompletion)
  public static func disconnect()
  public static func getMediaState() -> ScreenMeetLiveOSX.SMParticipantMediaState
  public static func shareCamera(_ cameraDevice: AVFoundation.AVCaptureDevice!)
  public static func shareScreen(_ source: ScreenMeetLiveOSX.SMVideoSource)
  public static func shareScreenWithImageTransfer(_ completion: @escaping ((ScreenMeetLiveOSX.SMImageHandler?) -> Swift.Void))
  public static func stopVideoSharing(_ source: ScreenMeetLiveOSX.SMVideoSource)
  public static func shareMicrophone()
  public static func stopAudioSharing()
  public static func getActiveSources() -> [ScreenMeetLiveOSX.SMVideoSource]
  public static func getParticipants() -> [ScreenMeetLiveOSX.SMParticipant]
  public static func getConnectionState() -> ScreenMeetLiveOSX.SMConnectionState
  public static func getConfidentiality() -> ScreenMeetLiveOSX.SMConfidentiality
  public static func getChatMessages() -> [ScreenMeetLiveOSX.SMTextMessage]
  public static func sendTextMessage(_ text: Swift.String)
  public static func requestFeature(_ permissionType: ScreenMeetLiveOSX.SMPermissionType, _ tragetParticipantId: Swift.String)
  public static func cancelFeatureRequest(_ featureRequest: ScreenMeetLiveOSX.SMFeatureRequestData)
  public static func pendingFeatureRequests() -> [ScreenMeetLiveOSX.SMFeatureRequestData]
  public static func grantedFeatureRequests() -> [ScreenMeetLiveOSX.SMFeatureRequestData]
  public static func stopFeature(_ featureRequest: ScreenMeetLiveOSX.SMFeatureRequestData)
  public static func sendLaserPointerEvent(_ targetParticipantId: Swift.String, _ x: CoreGraphics.CGFloat, _ y: CoreGraphics.CGFloat)
  public static func sendRemoteControlEvent(_ event: ScreenMeetLiveOSX.SMRemoteControlEvent)
  @objc override dynamic public init()
  @objc deinit
}
public enum SMLogLevel : Swift.Int, Swift.Comparable {
  case none
  case info
  case debug
  case error
  public static func < (lhs: ScreenMeetLiveOSX.SMLogLevel, rhs: ScreenMeetLiveOSX.SMLogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SMDeveloperLogTier : Swift.Int, Swift.Comparable {
  case signalling
  case mediasoup
  case http
  case webrtc
  case rawSocket
  public static func < (lhs: ScreenMeetLiveOSX.SMDeveloperLogTier, rhs: ScreenMeetLiveOSX.SMDeveloperLogTier) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ScreenMeetConfig {
  open var organizationKey: Swift.String
  open var endpoint: Foundation.URL
  open var parameters: [Swift.String : Any]
  open var collectMetric: Swift.Bool
  open var loggingLevel: ScreenMeetLiveOSX.SMLogLevel {
    get
    set
  }
  open var developerLoggingTiers: [ScreenMeetLiveOSX.SMDeveloperLogTier] {
    get
    set
  }
  open var httpTimeout: Swift.Double {
    get
    set
  }
  open var httpNumRetry: Swift.Int {
    get
    set
  }
  open var socketConnectionTimeout: Swift.Double {
    get
    set
  }
  open var socketConnectionNumRetries: Swift.Int {
    get
    set
  }
  open var socketReconnectNumRetries: Swift.Int {
    get
    set
  }
  open var socketReconnectDelay: Swift.Double {
    get
    set
  }
  open var webRtcTimeout: Swift.Double {
    get
    set
  }
  open var webRtcNumRetries: Swift.Int {
    get
    set
  }
  @objc deinit
}
public enum SMConnectionState : Swift.Equatable, Swift.CustomStringConvertible {
  case connecting
  case connected
  case reconnecting
  case disconnected(_: ScreenMeetLiveOSX.SMDisconnectionReason)
  case waitingEntrancePermission
  public static func == (l: ScreenMeetLiveOSX.SMConnectionState, r: ScreenMeetLiveOSX.SMConnectionState) -> Swift.Bool
  public var description: Swift.String {
    get
  }
}
public enum SMDisconnectionReason {
  case callEndedByServer
  case leftCall
  case networkError
  case callNotStarted
  case knockWaitTimeExpired
  case reconnectWaitTimeExpired
  case hostRefuedToLetIn
  public static func == (a: ScreenMeetLiveOSX.SMDisconnectionReason, b: ScreenMeetLiveOSX.SMDisconnectionReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMConfidentiality {
  public func addConfidentialView(_ view: AppKit.NSView)
  public func removeConfidentialView(_ view: AppKit.NSView)
  public func addConfidentialRect(_ rect: CoreGraphics.CGRect)
  public func removeConfidentialRect(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMRemoteControlEvent : SocketIO.SocketData {
  public var to: Swift.String {
    get
  }
  public init(_ to: Swift.String)
  public func socketRepresentation() -> SocketIO.SocketData
  @objc deinit
}
public enum SMIdentityInfoRole : Swift.Int, Swift.Codable {
  case SERVER
  case HOST
  case SUPERVISOR
  case AGENT
  case GUEST
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SMMouseActionType : Swift.String {
  case unknown
  case leftdown
  case rightdown
  case move
  case leftup
  case rightup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMRemoteControlMouseEvent : ScreenMeetLiveOSX.SMRemoteControlEvent {
  public var ts: Swift.Int64 {
    get
  }
  public var x: Swift.Double {
    get
  }
  public var y: Swift.Double {
    get
  }
  public var type: ScreenMeetLiveOSX.SMMouseActionType {
    get
  }
  public init(_ to: Swift.String, _ x: Swift.Double, _ y: Swift.Double, _ type: ScreenMeetLiveOSX.SMMouseActionType)
  override public func socketRepresentation() -> SocketIO.SocketData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SMFeatureRequestData : SocketIO.SocketData {
  public var deviceGrantId: Swift.String! {
    get
  }
  public var grantorCid: Swift.String! {
    get
  }
  public var privilege: Swift.String! {
    get
  }
  public var requestId: Swift.String! {
    get
  }
  public var requestorCid: Swift.String! {
    get
  }
  public var status: Swift.String! {
    get
  }
  public var timeCreated: Swift.CLong! {
    get
  }
  public var uniqueGrantor: Swift.String! {
    get
  }
  public var uniqueRequestor: Swift.String! {
    get
  }
  public func socketRepresentation() -> SocketIO.SocketData
  @objc deinit
}
public enum SMKeyboardActionType : Swift.String {
  case unknown
  case keydown
  case keyup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SMRemoteControlKeyboardEvent : ScreenMeetLiveOSX.SMRemoteControlEvent {
  public var key: Swift.String {
    get
  }
  public var ascii: Swift.Int {
    get
  }
  public var unicode: Swift.Int {
    get
  }
  public var type: ScreenMeetLiveOSX.SMKeyboardActionType {
    get
  }
  public init(_ to: Swift.String, _ key: Swift.String, _ ascii: Swift.Int, _ unicode: Swift.Int, _ type: ScreenMeetLiveOSX.SMKeyboardActionType)
  override public func socketRepresentation() -> SocketIO.SocketData
  @objc deinit
}
public enum SMErrorCode : Swift.Equatable {
  public static func == (l: ScreenMeetLiveOSX.SMErrorCode, r: ScreenMeetLiveOSX.SMErrorCode) -> Swift.Bool
  case httpError(_: ScreenMeetLiveOSX.SMHTTPCode)
  case socketError
  case notReachableError
  case transactionInternalError
  case capturerInternalError
  case mediaTrackError
  case knockEntryPermissionRequiredError
  case knockWaitTimeForEntryExpiredError
  case droppedByServer
  case tooManyCaptchaAttempmts
}
public enum SMHTTPCode : Swift.Int {
  case notFound
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SMError {
  public var code: ScreenMeetLiveOSX.SMErrorCode
  public var message: Swift.String
  public var challenge: ScreenMeetLiveOSX.SMChallenge?
}
@objc @_inheritsConvenienceInitializers public class SMImageHandler : ObjectiveC.NSObject {
  public func transferImage(_ image: AppKit.NSImage)
  @objc override dynamic public init()
  @objc deinit
}
extension ScreenMeetLiveOSX.SMCapability : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMCapability : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMCapability : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMParticipantMediaState.AudioState : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMParticipantMediaState.AudioState : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMPermissionType : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMPermissionType : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMPermissionType : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMLogLevel : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMLogLevel : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMDeveloperLogTier : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMDeveloperLogTier : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMDisconnectionReason : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMDisconnectionReason : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMIdentityInfoRole : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMIdentityInfoRole : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMIdentityInfoRole : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMMouseActionType : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMMouseActionType : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMMouseActionType : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMKeyboardActionType : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMKeyboardActionType : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMKeyboardActionType : Swift.RawRepresentable {}
extension ScreenMeetLiveOSX.SMHTTPCode : Swift.Equatable {}
extension ScreenMeetLiveOSX.SMHTTPCode : Swift.Hashable {}
extension ScreenMeetLiveOSX.SMHTTPCode : Swift.RawRepresentable {}
